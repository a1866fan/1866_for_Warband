# -*- coding: UTF-8 -*-
####################################################################################################################
# Generated by Warband Module Decompiler
# All rights of the module belong to their respective owners
####################################################################################################################

from header_common import *
from header_operations import *
from header_parties import *
from header_items import *
from header_skills import *
from header_triggers import *
from header_troops import *

from module_constants import *

####################################################################################################################
#  Each trigger contains the following fields:
# 1) Check interval: How frequently this trigger will be checked
# 2) Delay interval: Time to wait before applying the consequences of the trigger
#    After its conditions have been evaluated as true.
# 3) Re-arm interval. How much time must pass after applying the consequences of the trigger for the trigger to become active again.
#    You can put the constant ti_once here to make sure that the trigger never becomes active again after it fires once.
# 4) Conditions block (list). This must be a valid operation block. See header_operations.py for reference.
#    Every time the trigger is checked, the conditions block will be executed.
#    If the conditions block returns true, the consequences block will be executed.
#    If the conditions block is empty, it is assumed that it always evaluates to true.
# 5) Consequences block (list). This must be a valid operation block. See header_operations.py for reference. 
####################################################################################################################

triggers = [
  (0.1, 0, ti_once,[
    (map_free, 0),
  ],
  [
    (dialog_box, "str_tutorial_map1"),
  ]),

  (0, 0, 24,[],
  [
    (reset_item_probabilities, 100),
    (set_merchandise_modifier_quality, 150),
    (reset_item_probabilities, 100),
    (set_item_probability_in_merchandise, "itm_deer_hide", 700),
    (troop_add_merchandise, "trp_salt_mine_merchant", itp_type_goods, 36),
    (try_for_range, ":var0", "p_town_1", "p_castle_1"),
      (party_get_slot, ":var1", ":var0", 23),
      (reset_item_probabilities, 100),
      (try_begin),
        (store_distance_to_party_from_party, ":var2", ":var0", "p_mine_1"),
        (val_mul, ":var2", 4),
        (try_begin),
          (gt, ":var2", 100),
          (assign, ":var3", 49),
          (set_item_probability_in_merchandise, "itm_tools", ":var3"),
        (else_try),
          (store_sub, ":var3", 300, ":var2"),
          (set_item_probability_in_merchandise, "itm_tools", ":var3"),
        (try_end),
      (try_end),
      (troop_add_merchandise, ":var1", itp_type_goods, 36),
      (troop_ensure_inventory_space, ":var1", 30),
      (troop_sort_inventory, ":var1"),
      (store_troop_gold, ":var4", ":var1"),
      (lt, ":var4", 15000),
      (store_random_in_range, ":var5", 5000, 10000),
      (call_script, "script_troop_add_gold", ":var1", ":var5"),
    (try_end),
  ]),

  (0, 0, 24,[],
  [
    (reset_item_probabilities, 100),
    (set_merchandise_modifier_quality, 150),
    (try_for_range, reg2, "trp_town_1_armorer", "trp_town_1_weaponsmith"),
      (troop_add_merchandise, reg2, itp_type_body_armor, 16),
      (troop_add_merchandise, reg2, itp_type_head_armor, 16),
      (troop_add_merchandise, reg2, itp_type_foot_armor, 8),
      (troop_add_merchandise, reg2, itp_type_hand_armor, 4),
      (troop_ensure_inventory_space, reg2, 30),
      (troop_sort_inventory, reg2),
      (store_troop_gold, reg6, reg2),
      (lt, reg6, 9000),
      (store_random_in_range, ":var0", 2000, 4000),
      (call_script, "script_troop_add_gold", reg2, ":var0"),
    (try_end, 0),
  ]),

  (0, 0, 24,[],
  [
    (reset_item_probabilities, 100),
    (set_merchandise_modifier_quality, 150),
    (try_for_range, reg2, "trp_town_1_weaponsmith", "trp_town_1_tavernkeeper"),
      (store_sub, ":var0", reg2, "trp_town_1_weaponsmith"),
      (val_add, ":var0", "p_town_1"),
      (store_faction_of_party, ":var1", ":var0"),
      (try_begin),
        (eq, ":var1", "fac_kingdom_3"),
        (troop_add_merchandise, reg2, itp_type_one_handed_wpn, 5),
        (troop_add_merchandise, reg2, itp_type_two_handed_wpn, 1),
        (troop_add_merchandise, reg2, itp_type_polearm, 5),
        (troop_add_merchandise, reg2, itp_type_bow, 3),
        (troop_add_merchandise, reg2, itp_type_pistol, 2),
        (troop_add_merchandise, reg2, itp_type_musket, 2),
        (troop_add_merchandise, reg2, itp_type_bullets, 2),
        (troop_add_merchandise, reg2, itp_type_crossbow, 1),
        (troop_add_merchandise, reg2, itp_type_thrown, 4),
        (troop_add_merchandise, reg2, itp_type_arrows, 4),
        (troop_add_merchandise, reg2, itp_type_bolts, 1),
      (else_try),
        (eq, ":var1", "fac_kingdom_4"),
        (troop_add_merchandise, reg2, itp_type_one_handed_wpn, 5),
        (troop_add_merchandise, reg2, itp_type_two_handed_wpn, 1),
        (troop_add_merchandise, reg2, itp_type_polearm, 5),
        (troop_add_merchandise, reg2, itp_type_bow, 5),
        (troop_add_merchandise, reg2, itp_type_pistol, 1),
        (troop_add_merchandise, reg2, itp_type_musket, 1),
        (troop_add_merchandise, reg2, itp_type_bullets, 1),
        (troop_add_merchandise, reg2, itp_type_crossbow, 1),
        (troop_add_merchandise, reg2, itp_type_thrown, 4),
        (troop_add_merchandise, reg2, itp_type_arrows, 4),
        (troop_add_merchandise, reg2, itp_type_bolts, 1),
      (else_try),
        (eq, ":var1", "fac_kingdom_2"),
        (troop_add_merchandise, reg2, itp_type_one_handed_wpn, 5),
        (troop_add_merchandise, reg2, itp_type_two_handed_wpn, 2),
        (troop_add_merchandise, reg2, itp_type_polearm, 2),
        (troop_add_merchandise, reg2, itp_type_pistol, 3),
        (troop_add_merchandise, reg2, itp_type_musket, 3),
        (troop_add_merchandise, reg2, itp_type_bullets, 3),
        (troop_add_merchandise, reg2, itp_type_crossbow, 2),
        (troop_add_merchandise, reg2, itp_type_thrown, 3),
        (troop_add_merchandise, reg2, itp_type_bolts, 2),
      (else_try),
        (eq, ":var1", "fac_kingdom_1"),
        (troop_add_merchandise, reg2, itp_type_one_handed_wpn, 2),
        (troop_add_merchandise, reg2, itp_type_two_handed_wpn, 1),
        (troop_add_merchandise, reg2, itp_type_polearm, 1),
        (troop_add_merchandise, reg2, itp_type_pistol, 4),
        (troop_add_merchandise, reg2, itp_type_musket, 4),
        (troop_add_merchandise, reg2, itp_type_bullets, 4),
        (troop_add_merchandise, reg2, itp_type_crossbow, 2),
        (troop_add_merchandise, reg2, itp_type_thrown, 2),
        (troop_add_merchandise, reg2, itp_type_bolts, 3),
      (try_end),
      (troop_ensure_inventory_space, reg2, 30),
      (troop_sort_inventory, reg2),
      (store_troop_gold, reg6, reg2),
      (lt, reg6, 9000),
      (store_random_in_range, ":var2", 2000, 4000),
      (call_script, "script_troop_add_gold", reg2, ":var2"),
    (try_end, 0),
    (call_script, "script_override_unuseable_items"),
  ]),

  (0, 0, 24,[],
  [
    (reset_item_probabilities, 100),
    (set_merchandise_modifier_quality, 150),
    (try_for_range, ":var0", "trp_town_1_horse_merchant", "trp_town_1_mayor"),
      (troop_add_merchandise, ":var0", itp_type_horse, 5),
      (troop_ensure_inventory_space, ":var0", 65),
      (troop_sort_inventory, ":var0"),
      (store_troop_gold, ":var1", ":var0"),
      (lt, ":var1", 6000),
      (store_random_in_range, ":var2", 2000, 4000),
      (call_script, "script_troop_add_gold", ":var0", ":var2"),
    (try_end),
  ]),

  (2, 0, 0,[
    (store_random_party_of_template, reg2, "pt_prisoner_train_party"),
    (party_is_in_any_town, reg2),
  ],
  [
    (store_faction_of_party, ":var0", reg2),
    (call_script, "script_cf_select_random_walled_center_with_faction", ":var0", -1),
    (party_set_ai_behavior, reg2, ai_bhvr_travel_to_party),
    (party_set_ai_object, reg2, reg0),
    (party_set_flags, reg2, 65536, 0),
  ]),

  (4, 0, 0,[
    (eq, "$caravan_escort_state", 1),
    (get_party_ai_object, reg1, "$caravan_escort_party_id"),
    (neq, reg1, "$caravan_escort_destination_town"),
  ],
  [
    (assign, "$caravan_escort_state", 0),
  ]),

  (1.5, 0, 0,[
    (store_random_party_of_template, reg2, "pt_messenger_party"),
    (party_is_in_any_town, reg2),
  ],
  [
    (store_faction_of_party, ":var0", reg2),
    (call_script, "script_cf_select_random_walled_center_with_faction", ":var0", -1),
    (party_set_ai_behavior, reg2, ai_bhvr_travel_to_party),
    (party_set_ai_object, reg2, reg0),
    (party_set_flags, reg2, 65536, 0),
  ]),

  (1, 0, 0,[],
  [
    (try_for_range, ":var0", "fac_player_supporters_faction", "fac_kingdoms_end"),
      (faction_slot_eq, ":var0", 21, 0),
      (neq, ":var0", "fac_player_supporters_faction"),
      (try_begin),
        (store_random_in_range, ":var1", 0, 100),
        (lt, ":var1", 10),
        (call_script, "script_create_kingdom_party_if_below_limit", ":var0", 11),
      (try_end),
    (try_end),
  ]),

  (0.2, 0, 0,[
    (check_quest_active, "qst_incriminate_loyal_commander"),
    (neg|check_quest_concluded, "qst_incriminate_loyal_commander"),
    (quest_slot_eq, "qst_incriminate_loyal_commander", 11, 2),
    (quest_get_slot, ":var0", "qst_incriminate_loyal_commander", 1),
    (quest_get_slot, ":var1", "qst_incriminate_loyal_commander", 8),
    (try_begin),
      (neg|party_is_active, ":var1"),
      (quest_set_slot, "qst_incriminate_loyal_commander", 11, 3),
      (call_script, "script_fail_quest", "qst_incriminate_loyal_commander"),
    (else_try),
      (party_is_in_town, ":var1", ":var0"),
      (remove_party, ":var1"),
      (quest_set_slot, "qst_incriminate_loyal_commander", 11, 3),
      (quest_get_slot, ":var2", "qst_incriminate_loyal_commander", 4),
      (assign, ":var3", 0),
      (try_for_range, ":var4", "fac_player_supporters_faction", "fac_kingdoms_end"),
        (faction_slot_eq, ":var4", 21, 0),
        (neq, ":var4", "fac_player_supporters_faction"),
        (neg|quest_slot_eq, "qst_incriminate_loyal_commander", 3, ":var4"),
        (val_add, ":var3", 1),
      (try_end),
      (try_begin),
        (gt, ":var3", 0),
        (store_random_in_range, ":var5", 0, ":var3"),
        (assign, ":var6", -1),
        (try_for_range, ":var4", "fac_player_supporters_faction", "fac_kingdoms_end"),
          (eq, ":var6", -1),
          (faction_slot_eq, ":var4", 21, 0),
          (neq, ":var4", "fac_player_supporters_faction"),
          (neg|quest_slot_eq, "qst_incriminate_loyal_commander", 3, ":var4"),
          (val_sub, ":var5", 1),
          (lt, ":var5", 0),
          (assign, ":var6", ":var4"),
        (try_end),
      (try_end),
      (try_begin),
        (gt, ":var6", 0),
        (call_script, "script_change_troop_faction", ":var2", ":var6"),
      (else_try),
        (call_script, "script_change_troop_faction", ":var2", "fac_robber_knights"),
      (try_end),
      (call_script, "script_succeed_quest", "qst_incriminate_loyal_commander"),
    (try_end),
  ],
  []),

  (0.2, 0, 0,[
    (check_quest_active, "qst_bring_back_runaway_serfs"),
    (neg|check_quest_concluded, "qst_bring_back_runaway_serfs"),
    (quest_get_slot, ":var0", "qst_bring_back_runaway_serfs", 7),
    (quest_get_slot, ":var1", "qst_bring_back_runaway_serfs", 1),
    (try_begin),
      (party_is_active, "$qst_bring_back_runaway_serfs_party_1"),
      (try_begin),
        (party_is_in_town, "$qst_bring_back_runaway_serfs_party_1", ":var1"),
        (remove_party, "$qst_bring_back_runaway_serfs_party_1"),
        (val_add, "$qst_bring_back_runaway_serfs_num_parties_fleed", 1),
      (else_try),
        (party_is_in_town, "$qst_bring_back_runaway_serfs_party_1", ":var0"),
        (remove_party, "$qst_bring_back_runaway_serfs_party_1"),
        (val_add, "$qst_bring_back_runaway_serfs_num_parties_returned", 1),
      (else_try),
        (store_distance_to_party_from_party, ":var2", "p_main_party", "$qst_bring_back_runaway_serfs_party_1"),
        (gt, ":var2", 3),
        (party_set_ai_object, "$qst_bring_back_runaway_serfs_party_1", ":var1"),
      (try_end),
    (try_end),
    (try_begin),
      (party_is_active, "$qst_bring_back_runaway_serfs_party_2"),
      (try_begin),
        (party_is_in_town, "$qst_bring_back_runaway_serfs_party_2", ":var1"),
        (remove_party, "$qst_bring_back_runaway_serfs_party_2"),
        (val_add, "$qst_bring_back_runaway_serfs_num_parties_fleed", 1),
      (else_try),
        (party_is_in_town, "$qst_bring_back_runaway_serfs_party_2", ":var0"),
        (remove_party, "$qst_bring_back_runaway_serfs_party_2"),
        (val_add, "$qst_bring_back_runaway_serfs_num_parties_returned", 1),
      (else_try),
        (store_distance_to_party_from_party, ":var2", "p_main_party", "$qst_bring_back_runaway_serfs_party_2"),
        (gt, ":var2", 3),
        (party_set_ai_object, "$qst_bring_back_runaway_serfs_party_2", ":var1"),
      (try_end),
    (try_end),
    (try_begin),
      (party_is_active, "$qst_bring_back_runaway_serfs_party_3"),
      (try_begin),
        (party_is_in_town, "$qst_bring_back_runaway_serfs_party_3", ":var1"),
        (remove_party, "$qst_bring_back_runaway_serfs_party_3"),
        (val_add, "$qst_bring_back_runaway_serfs_num_parties_fleed", 1),
      (else_try),
        (party_is_in_town, "$qst_bring_back_runaway_serfs_party_3", ":var0"),
        (remove_party, "$qst_bring_back_runaway_serfs_party_3"),
        (val_add, "$qst_bring_back_runaway_serfs_num_parties_returned", 1),
      (else_try),
        (store_distance_to_party_from_party, ":var2", "p_main_party", "$qst_bring_back_runaway_serfs_party_3"),
        (gt, ":var2", 3),
        (party_set_ai_object, "$qst_bring_back_runaway_serfs_party_3", ":var1"),
      (try_end),
    (try_end),
    (assign, ":var3", "$qst_bring_back_runaway_serfs_num_parties_returned"),
    (val_add, ":var3", "$qst_bring_back_runaway_serfs_num_parties_fleed"),
    (ge, ":var3", 3),
    (try_begin),
      (ge, "$qst_bring_back_runaway_serfs_num_parties_returned", 3),
      (call_script, "script_succeed_quest", "qst_bring_back_runaway_serfs"),
    (else_try),
      (eq, "$qst_bring_back_runaway_serfs_num_parties_returned", 0),
      (call_script, "script_fail_quest", "qst_bring_back_runaway_serfs"),
    (else_try),
      (call_script, "script_conclude_quest", "qst_bring_back_runaway_serfs"),
    (try_end),
  ],
  []),

  (0.5, 0, 0,[
    (check_quest_active, "qst_follow_spy"),
    (eq, "$qst_follow_spy_no_active_parties", 0),
    (quest_get_slot, ":var0", "qst_follow_spy", 12),
    (quest_get_slot, ":var1", "qst_follow_spy", 7),
    (assign, ":var2", 0),
    (try_begin),
      (this_or_next|eq, "$qst_follow_spy_run_away", 1),
      (neg|this_or_next|party_is_active, "$qst_follow_spy_spy_party"),
      (neg|party_is_active, "$qst_follow_spy_spy_partners_party"),
    (else_try),
      (eq, "$qst_follow_spy_meeting_state", 0),
      (store_distance_to_party_from_party, ":var3", "p_main_party", "$qst_follow_spy_spy_party"),
      (try_begin),
        (assign, ":var4", 3),
        (try_begin),
          (is_currently_night),
          (assign, ":var4", 1),
        (try_end),
        (le, ":var3", ":var4"),
        (store_distance_to_party_from_party, ":var5", "p_main_party", ":var0"),
        (gt, ":var5", 1),
        (assign, ":var2", 1),
        (assign, "$qst_follow_spy_run_away", 1),
        (display_message, "str_qst_follow_spy_noticed_you"),
      (else_try),
        (store_distance_to_party_from_party, ":var3", "$qst_follow_spy_spy_partners_party", "$qst_follow_spy_spy_party"),
        (le, ":var3", 1),
        (party_attach_to_party, "$qst_follow_spy_spy_party", "$qst_follow_spy_spy_partners_party"),
        (assign, "$qst_follow_spy_meeting_state", 1),
        (assign, "$qst_follow_spy_meeting_counter", 0),
      (try_end),
    (else_try),
      (eq, "$qst_follow_spy_meeting_state", 1),
      (store_distance_to_party_from_party, ":var3", "p_main_party", "$qst_follow_spy_spy_partners_party"),
      (try_begin),
        (le, ":var3", 1),
        (party_detach, "$qst_follow_spy_spy_party"),
        (assign, ":var2", 1),
        (assign, "$qst_follow_spy_run_away", 1),
        (display_message, "str_qst_follow_spy_noticed_you"),
      (else_try),
        (val_add, "$qst_follow_spy_meeting_counter", 1),
        (gt, "$qst_follow_spy_meeting_counter", 4),
        (party_detach, "$qst_follow_spy_spy_party"),
        (assign, ":var2", 0),
        (assign, "$qst_follow_spy_meeting_state", 2),
      (try_end),
    (try_end),
    (try_begin),
      (eq, ":var2", 1),
      (party_set_ai_object, "$qst_follow_spy_spy_party", ":var0"),
      (party_set_ai_object, "$qst_follow_spy_spy_partners_party", ":var1"),
      (party_set_ai_behavior, "$qst_follow_spy_spy_party", ai_bhvr_travel_to_party),
      (party_set_ai_behavior, "$qst_follow_spy_spy_partners_party", ai_bhvr_travel_to_party),
      (party_set_flags, "$qst_follow_spy_spy_party", 65536, 0),
      (party_set_flags, "$qst_follow_spy_spy_partners_party", 65536, 0),
    (try_end),
    (assign, ":var6", 0),
    (try_begin),
      (party_is_active, "$qst_follow_spy_spy_party"),
      (val_add, ":var6", 1),
      (party_is_in_town, "$qst_follow_spy_spy_party", ":var0"),
      (remove_party, "$qst_follow_spy_spy_party"),
      (assign, "$qst_follow_spy_spy_back_in_town", 1),
      (val_sub, ":var6", 1),
    (try_end),
    (try_begin),
      (party_is_active, "$qst_follow_spy_spy_partners_party"),
      (val_add, ":var6", 1),
      (party_is_in_town, "$qst_follow_spy_spy_partners_party", ":var1"),
      (remove_party, "$qst_follow_spy_spy_partners_party"),
      (assign, "$qst_follow_spy_partner_back_in_town", 1),
      (val_sub, ":var6", 1),
    (try_end),
    (try_begin),
      (eq, "$qst_follow_spy_partner_back_in_town", 1),
      (eq, "$qst_follow_spy_spy_back_in_town", 1),
      (call_script, "script_fail_quest", "qst_follow_spy"),
    (try_end),
    (try_begin),
      (eq, ":var6", 0),
      (assign, "$qst_follow_spy_no_active_parties", 1),
      (party_count_prisoners_of_type, ":var7", "p_main_party", "trp_spy"),
      (party_count_prisoners_of_type, ":var8", "p_main_party", "trp_spy_partner"),
      (gt, ":var7", 0),
      (gt, ":var8", 0),
      (call_script, "script_succeed_quest", "qst_follow_spy"),
    (try_end),
  ],
  []),

  (168, 0, 0,[],
  [
    (val_mul, "$debt_to_merchants_guild", 101),
    (val_div, "$debt_to_merchants_guild", 100),
  ]),

  (0.1, 0, 0.1,[
    (check_quest_active, "qst_escort_merchant_caravan"),
    (eq, "$escort_merchant_caravan_mode", 1),
  ],
  [
    (quest_get_slot, ":var0", "qst_escort_merchant_caravan", 8),
    (try_begin),
      (party_is_active, ":var0"),
      (party_set_ai_behavior, ":var0", ai_bhvr_hold),
      (party_set_flags, ":var0", 65536, 0),
    (try_end),
  ]),

  (0.1, 0, 0.1,[
    (check_quest_active, "qst_escort_merchant_caravan"),
    (eq, "$escort_merchant_caravan_mode", 0),
  ],
  [
    (quest_get_slot, ":var0", "qst_escort_merchant_caravan", 8),
    (try_begin),
      (party_is_active, ":var0"),
      (party_set_ai_behavior, ":var0", ai_bhvr_escort_party),
      (party_set_flags, ":var0", 65536, 0),
      (party_set_ai_object, ":var0", "p_main_party"),
    (try_end),
  ]),

  (0.1, 0, 0,[
    (check_quest_active, "qst_escort_merchant_caravan"),
    (quest_get_slot, ":var0", "qst_escort_merchant_caravan", 8),
    (neg|party_is_active, ":var0"),
  ],
  [
    (call_script, "script_abort_quest", "qst_escort_merchant_caravan", 2),
  ]),

  (0.1, 0, 0.1,[
    (check_quest_active, "qst_escort_villagers"),
    (eq, "$escort_villagers_mode", 1),
  ],
  [
    (quest_get_slot, ":var0", "qst_escort_villagers", 8),
    (try_begin),
      (party_is_active, ":var0"),
      (party_set_ai_behavior, ":var0", ai_bhvr_hold),
      (party_set_flags, ":var0", 65536, 0),
    (try_end),
  ]),

  (0.1, 0, 0.1,[
    (check_quest_active, "qst_escort_villagers"),
    (eq, "$escort_villagers_mode", 0),
  ],
  [
    (quest_get_slot, ":var0", "qst_escort_villagers", 8),
    (try_begin),
      (party_is_active, ":var0"),
      (party_set_ai_behavior, ":var0", ai_bhvr_escort_party),
      (party_set_flags, ":var0", 65536, 0),
      (party_set_ai_object, ":var0", "p_main_party"),
    (try_end),
  ]),

  (0.1, 0, 0,[
    (check_quest_active, "qst_escort_villagers"),
    (quest_get_slot, ":var0", "qst_escort_villagers", 8),
    (neg|party_is_active, ":var0"),
  ],
  [
    (call_script, "script_abort_quest", "qst_escort_villagers", 2),
  ]),

  (0.3, 0, 1.1,[
    (check_quest_active, "qst_troublesome_bandits"),
    (neg|check_quest_failed, "qst_troublesome_bandits"),
    (store_num_parties_destroyed, ":var0", "pt_troublesome_bandits"),
    (lt, "$qst_troublesome_bandits_eliminated", ":var0"),
    (store_num_parties_destroyed_by_player, ":var1", "pt_troublesome_bandits"),
    (eq, ":var1", "$qst_troublesome_bandits_eliminated_by_player"),
  ],
  [
    (display_message, "str_bandits_eliminated_by_another"),
    (call_script, "script_abort_quest", "qst_troublesome_bandits", 2),
  ]),

  (0.3, 0, 1.1,[
    (check_quest_active, "qst_troublesome_bandits"),
    (neg|check_quest_succeeded, "qst_troublesome_bandits"),
    (store_num_parties_destroyed, ":var0", "pt_troublesome_bandits"),
    (lt, "$qst_troublesome_bandits_eliminated", ":var0"),
    (store_num_parties_destroyed_by_player, ":var1", "pt_troublesome_bandits"),
    (neq, ":var1", "$qst_troublesome_bandits_eliminated_by_player"),
  ],
  [
    (call_script, "script_succeed_quest", "qst_troublesome_bandits"),
  ]),

  (1, 0, 0,[
    (check_quest_active, "qst_kidnapped_girl"),
    (quest_get_slot, ":var0", "qst_kidnapped_girl", 8),
    (party_is_active, ":var0"),
    (party_is_in_any_town, ":var0"),
    (remove_party, ":var0"),
  ],
  []),

  (0, 0, 336,[
    (try_for_range, ":var0", 0, 0),
      (troop_set_slot, ":var0", 12, 0),
      (neq, ":var0", "$supported_pretender"),
      (troop_get_slot, ":var1", ":var0", 14),
      (faction_slot_eq, ":var1", 21, 0),
      (faction_slot_eq, ":var1", 60, 1),
      (neg|troop_slot_eq, ":var0", 2, 2),
      (try_for_range, ":var2", 0, 30),
        (troop_slot_eq, ":var0", 12, 0),
        (store_random_in_range, ":var3", "p_town_1", "p_castle_1"),
        (store_faction_of_party, ":var4", ":var3"),
        (store_relation, ":var5", ":var4", ":var1"),
        (le, ":var5", 0),
        (troop_set_slot, ":var0", 12, ":var3"),
        (try_begin),
          (eq, "$cheat_mode", 1),
          (str_store_troop_name, s4, ":var0"),
          (str_store_party_name, s5, ":var3"),
          (display_message, "@{s4} is in {s5}"),
        (try_end),
      (try_end),
    (try_end),
  ],
  []),

  (360, 0, 0,[
    (call_script, "script_update_companion_candidates_in_taverns"),
  ],
  []),

  (0, 0, 24,[
    (eq, 1, 1),
  ],
  [
    (assign, ":var0", 0),
    (assign, ":var1", 100),
    (try_for_range, ":var2", "trp_npc1", "trp_kingdom_heroes_including_player_begin"),
      (main_party_has_troop, ":var2"),
      (val_add, ":var0", 1),
    (try_end),
    (val_sub, ":var1", ":var0"),
    (store_skill_level, ":var3", "skl_persuasion", "trp_player"),
    (val_add, ":var1", ":var3"),
    (assign, reg7, ":var1"),
    (try_begin),
      (gt, "$personality_clash_after_24_hrs", 0),
      (eq, "$disable_npc_complaints", 0),
      (try_begin),
        (troop_get_slot, ":var4", "$personality_clash_after_24_hrs", 71),
        (main_party_has_troop, "$personality_clash_after_24_hrs"),
        (main_party_has_troop, ":var4"),
        (assign, "$npc_with_personality_clash", "$personality_clash_after_24_hrs"),
      (try_end),
      (assign, "$personality_clash_after_24_hrs", 0),
    (try_end),
    (try_for_range, ":var5", "trp_npc1", "trp_kingdom_heroes_including_player_begin"),
      (troop_set_slot, ":var5", 81, 0),
      (try_begin),
        (troop_slot_eq, ":var5", 5, 1),
        (troop_set_slot, ":var5", 80, 1),
      (try_end),
      (troop_get_slot, ":var6", ":var5", 2),
      (try_begin),
        (eq, ":var6", 11),
        (troop_get_slot, ":var7", ":var5", 84),
        (str_store_troop_name, s31, ":var5"),
        (troop_get_slot, ":var8", "trp_player", 7),
        (assign, reg4, ":var8"),
        (assign, reg5, ":var7"),
        (gt, ":var8", ":var7"),
        (troop_set_slot, ":var5", 77, 0),
        (troop_set_slot, ":var5", 69, 0),
        (troop_set_slot, ":var5", 2, 0),
      (try_end),
      (try_begin),
        (main_party_has_troop, ":var5"),
        (call_script, "script_npc_morale", ":var5"),
        (assign, ":var9", reg0),
        (try_begin),
          (lt, ":var9", 20),
          (store_random_in_range, ":var10", 0, 100),
          (val_add, ":var9", ":var10"),
          (lt, ":var9", 20),
          (assign, "$npc_is_quitting", ":var5"),
        (try_end),
        (troop_get_slot, ":var11", ":var5", 77),
        (val_mul, ":var11", 90),
        (val_div, ":var11", ":var1"),
        (troop_set_slot, ":var5", 77, ":var11"),
        (troop_get_slot, ":var11", ":var5", 69),
        (val_mul, ":var11", 90),
        (val_div, ":var11", ":var1"),
        (troop_set_slot, ":var5", 69, ":var11"),
        (try_begin),
          (this_or_next|troop_slot_ge, ":var5", 72, 1),
          (eq, "$disable_npc_complaints", 1),
          (troop_get_slot, ":var12", ":var5", 71),
          (main_party_has_troop, ":var12"),
          (call_script, "script_reduce_companion_morale_for_clash", ":var5", ":var12", 72),
        (try_end),
        (try_begin),
          (this_or_next|troop_slot_ge, ":var5", 74, 1),
          (eq, "$disable_npc_complaints", 1),
          (troop_get_slot, ":var12", ":var5", 73),
          (main_party_has_troop, ":var12"),
          (call_script, "script_reduce_companion_morale_for_clash", ":var5", ":var12", 74),
        (try_end),
        (try_begin),
          (this_or_next|troop_slot_ge, ":var5", 76, 1),
          (eq, "$disable_npc_complaints", 1),
          (troop_get_slot, ":var12", ":var5", 75),
          (main_party_has_troop, ":var12"),
          (troop_get_slot, ":var11", ":var5", 77),
          (val_mul, ":var11", 9),
          (val_div, ":var11", 10),
          (troop_set_slot, ":var5", 77, ":var11"),
        (try_end),
        (try_begin),
          (eq, "$disable_npc_complaints", 0),
          (eq, "$npc_with_personality_clash", 0),
          (eq, "$npc_with_personality_clash_2", 0),
          (eq, "$personality_clash_after_24_hrs", 0),
          (troop_slot_eq, ":var5", 72, 0),
          (troop_get_slot, ":var4", ":var5", 71),
          (main_party_has_troop, ":var4"),
          (assign, "$personality_clash_after_24_hrs", ":var5"),
        (try_end),
      (try_end),
    (try_end),
  ]),

]